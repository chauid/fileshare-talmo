generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model DeleteVote {
  user_id String @db.VarChar(50)
  file_id Int
  users   Users  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "delete_vote_ibfk_1")
  files   Files  @relation(fields: [file_id], references: [id], onUpdate: Restrict, map: "delete_vote_ibfk_2")

  @@id([user_id, file_id])
  @@index([file_id], map: "file_id")
  @@map("delete_vote")
}

model Files {
  id          Int          @id @default(autoincrement())
  user_id     String       @db.VarChar(50)
  group_id    Int
  bucket_uri  String       @unique(map: "bucket_uri") @default("") @db.VarChar(255)
  bucket_path String       @default("") @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(0)
  updated_at  DateTime?    @default(now()) @db.Timestamp(0)
  delete_vote DeleteVote[]
  groups      Groups       @relation(fields: [group_id], references: [id], onUpdate: Restrict, map: "files_ibfk_1")
  users       Users        @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "files_ibfk_2")

  @@index([group_id], map: "group_id")
  @@index([user_id], map: "user_id")
  @@map("files")
}

model Groups {
  id                Int               @id @default(autoincrement())
  password          String            @db.VarChar(255)
  user_id           String            @db.VarChar(50)
  description       String?           @default("") @db.Text
  max_user          Int               @default(1)
  created_at        DateTime          @default(now()) @db.Timestamp(0)
  updated_at        DateTime?         @default(now()) @db.Timestamp(0)
  files             Files[]
  users             Users             @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "groups_ibfk_1")
  junc_users_groups JuncUsersGroups[]

  @@index([user_id], map: "user_id")
  @@map("groups")
}

model JuncUsersGroups {
  user_id  String @db.VarChar(50)
  group_id Int
  users    Users  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "junc_users_groups_ibfk_1")
  groups   Groups @relation(fields: [group_id], references: [id], onUpdate: Restrict, map: "junc_users_groups_ibfk_2")

  @@id([user_id, group_id])
  @@index([group_id], map: "group_id")
  @@map("junc_users_groups")
}

model Users {
  id                String            @id @db.VarChar(50)
  email             String?           @default("") @db.VarChar(70)
  name              String            @default("") @db.VarChar(50)
  password          String            @db.VarChar(255)
  phone             String            @db.Char(13)
  birth             DateTime          @db.Date
  profile_image     String            @default("") @db.VarChar(255)
  description       String?           @default("") @db.Text
  is_admin          Boolean           @default(false)
  created_at        DateTime          @default(now()) @db.Timestamp(0)
  updated_at        DateTime?         @default(now()) @db.Timestamp(0)
  deleted_at        DateTime?         @db.Timestamp(0)
  delete_vote       DeleteVote[]
  files             Files[]
  groups            Groups[]
  junc_users_groups JuncUsersGroups[]
  login_log         LoginLog[]

  @@map("users")
}

model LoginLog {
  id         Int      @id @default(autoincrement())
  user_id    String   @db.VarChar(50)
  agent      String?  @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
  users      Users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "login_log_ibfk_1")

  @@index([user_id], map: "user_id")
  @@map("login_log")
}
